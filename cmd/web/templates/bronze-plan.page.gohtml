{{template "base" .}}

{{define "title"}}
    Bronze Plan
{{end}}

{{define "content"}}
    {{$widget := index .Data "widget"}}

<h2 class="mt-3 text-center">Bronze Plan </h2>
<hr>
 <div class="alert alert-danger text-center d-none" id="card-messages"></div>

    <form action="/payment-succeeded-temp" method="POST"
    name="charge-form" id="charge-form"
    class="d-block needs-validation charge-form"
    autocomplete="off" novalidate="">

    <input type="hidden" name="product-id" id="product-id"
    value="{{$widget.ID}}">

    <input type="hidden" name="amount" id="amount"
    value="{{$widget.Price}}">

 {{/* <h3 class="mt-2 mb-3 text-center">{{$widget.Name}} : {{$widget.Price}} Soms</h3> */}}
    <h3 class="mt-2 mb-3 text-center">{{$widget.Name}} : {{formatCurrency $widget.Price}}</h3>
       <p>{{$widget.Description}} </p>
       <hr>
       
       
        <div class="mb-3">
            <label for="first-name" class="form-label">
            First Name
            </label>
            <input type="text" class="form-control" 
            id="firstName" name="first-name"
            required="" autocomplete="first-name-new">
            <div id="firstName-help" class="valid-feedback">
            
            </div>
        </div>
        <div class="mb-3">
            <label for="last-name" class="form-label">
           Last Name
            </label>
            <input type="text" class="form-control" 
            id="last-name" name="last-name"
            required="" autocomplete="last-name-new">
        </div>

         <div class="mb-3">
            <label for="email" class="form-label">
            Email
            </label>
            <input type="email" class="form-control" 
            id="email" name="email"
            required="" autocomplete="email-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">
            Name On Card
            </label>
            <input type="text" class="form-control" 
            id="cardholder" name="cardholder"
            required="" autocomplete="cardholder-name-new">
        </div>

        <div class="mb-3">
            <label for="card-element" class="form-label">
            Credit Card
            </label>
            <div id="card-element" class="form-control">
            </div>
            <div class="alert-danger text-center" id="card-errors" role="alert">
            </div>
             <div class="alert-success text-center" id="card-success" role="alert">
            </div>
        </div>
        <hr>

        <a id="pay-button" href="javascript:void(0)"
        class="btn btn-primary" onclick="val()">Pay {{formatCurrency $widget.Price}}/month</a>

        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">LOADING...</span>
            </div>
        </div>

        <input type="hidden" name="payment-intent"
        id="payment-intent">
         <input type="hidden" name="payment-method"
        id="payment-method">
         <input type="hidden" name="payment-amount"
        id="payment-amount">
         <input type="hidden" name="payment-currency"
        id="payment-currency">
    </form>

<br>
<hr>
{{end}}

{{define "js"}}
       {{$widget := index .Data "widget"}}
<script src="https://js.stripe.com/v3/"></script>
<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");

    stripe = Stripe({{.StripePublishableKey}});
    
    function hidePayButton() {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none");

    }

     function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");

    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

    function val() {
         console.log("Val Func")
        let form = document.getElementById("charge-form");
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }

        form.classList.add("was-validated");
        hidePayButton();

        let amountToCharge = document.getElementById("amount").value;
        console.log(amountToCharge);

        stripe.createPaymentMethod({
            type: "card",
            card: card,
            billing_details: {
                email: document.getElementById("email").value,
            },
        }).then(stripePaymentMethodHandler);
    }

    function stripePaymentMethodHandler(result) {
        if (result.error) {
            console.log(result.error)
            showCardError(result.error.message);
        } else {
            //create a customer and subscribe to plan
            let payload = {
                productId: document.getElementById("product-id").value,
                plan: '{{$widget.PlanID}}',
                paymentMethod: result.paymentMethod.id,
                email: document.getElementById("email").value,
                lastFour: result.paymentMethod.card.last4,
                cardBrand: result.paymentMethod.card.brand, 
                expiryMonth: result.paymentMethod.card.exp_month,
                expiryYear: result.paymentMethod.card.exp_year,
                firstName: document.getElementById("firstName").value,
                lastName: document.getElementById("last-name").value,
                amount: document.getElementById("amount").value,
            }

            const requestOptions = {
                method: "post",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload),
            }

            fetch("{{.API}}/api/create-customer-and-subscribe", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                console.log(data);

                if (data.error === false) {
                    processing.classList.add("d-none");
                    showCardSuccess();
                    sessionStorage.firstName = document.getElementById("firstName").value;
                    sessionStorage.lastName = document.getElementById("last-name").value;
            
                    sessionStorage.amount = "{{formatCurrency $widget.Price}}"
                    sessionStorage.lastFour = result.paymentMethod.card.last4,
                    sessionStorage.cardBrand = result.paymentMethod.card.brand, 
                    sessionStorage.expiryMonth = result.paymentMethod.card.exp_month,
                    sessionStorage.expiryYear = result.paymentMethod.card.exp_year,
            
                    location.href = "/receipt/bronze";
                } else {
                    //remove validation
                    document.getElementById("charge-form").classList.remove("was-validated");

                    Object.entries(data.errors).forEach((i) => {
                        const [key,value] = i;
                        console.log(`${key}: ${value}`)
                        document.getElementById(key).classList.add("is-invalid");
                        document.getElementById(key + "-help").classList.remove("valid-feedback");
                         document.getElementById(key + "-help").classList.add("invalid-feedback");
                        document.getElementById(key + "-help").innerText = value;
                    });
                    showPayButtons();
                }
            })
        }
    }

     (function() {
        //create stripe
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: "16px",
                lineHeight: "24px"
            }
        };

        //card entry
        card = elements.create("card", {
            style: style,
            hidePostalCode: true,
        });

        card.mount("#card-element");

        //check for input errors
        card.addEventListener("change", function(event){
            var displayError = document.getElementById("card-errors");
            if(event.error) {
                displayError.classList.remove("d-none");
                displayError.textContent = event.error.message;
            }else {
                displayError.classList.add("d-none");
                displayError.textContent = "";
            }
        });
    })()
</script>


{{end}}